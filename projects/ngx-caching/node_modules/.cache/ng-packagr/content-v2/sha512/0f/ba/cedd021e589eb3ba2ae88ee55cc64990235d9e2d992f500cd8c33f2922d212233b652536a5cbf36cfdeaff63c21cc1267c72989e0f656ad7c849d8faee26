{"hash":"bea426cf88816202ca0138bbd0c40e3bdfd3be79","fesm2020":{"code":"import * as i0 from '@angular/core';\nimport { Injectable } from '@angular/core';\n\nclass CacheService {\n    constructor() {\n        this.mapper = new Map();\n        this.loadPreferences();\n    }\n    get(key, object = false) {\n        if (this.mapper.has(key)) {\n            const item = this.mapper.get(key);\n            return object && item ? JSON.parse(item) : item;\n        }\n        return undefined;\n    }\n    getOrDefault(key, value, object = false) {\n        if (this.get(key) == null) {\n            this.set(key, value, object);\n            return value;\n        }\n        else\n            return this.get(key);\n    }\n    set(key, value, object = false) {\n        this.mapper.set(key, object ? JSON.stringify(value) : value);\n        localStorage.setItem(key, object ? JSON.stringify(value) : value);\n    }\n    loadPreferences() {\n        for (let index = 0; index < localStorage.length; index++) {\n            const cacheKey = localStorage.key(index) || '';\n            this.mapper.set(cacheKey, localStorage.getItem(cacheKey) || '');\n        }\n    }\n    clear() {\n        for (let index = 0; index < localStorage.length; index++) {\n            const cacheKey = localStorage.key(index) || '';\n            localStorage.removeItem(cacheKey);\n        }\n    }\n}\nCacheService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.3\", ngImport: i0, type: CacheService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nCacheService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.0.3\", ngImport: i0, type: CacheService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.3\", ngImport: i0, type: CacheService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return []; } });\n\n/*\n * Public API Surface of ngx-caching\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CacheService };\n//# sourceMappingURL=ngx-caching.mjs.map\n","map":{"version":3,"file":"ngx-caching.mjs","sources":["../../../projects/ngx-caching/src/lib/services/cache/cache.service.ts","../../../projects/ngx-caching/src/public-api.ts","../../../projects/ngx-caching/src/ngx-caching.ts"],"sourcesContent":["import {Injectable} from '@angular/core';\n\n@Injectable()\nexport class CacheService {\n  private readonly mapper: Map<string, string>;\n\n  constructor() {\n    this.mapper = new Map<string, string>();\n    this.loadPreferences()\n  }\n\n  get(key: string, object: boolean = false): any {\n    if (this.mapper.has(key)) {\n      const item = this.mapper.get(key);\n      return object && item ? JSON.parse(item) : item;\n    }\n    return undefined;\n  }\n\n  getOrDefault(key: string, value: any, object: boolean = false): any {\n    if (this.get(key) == null) {\n      this.set(key, value, object);\n      return value;\n    } else return this.get(key);\n  }\n\n  set(key: string, value: any, object: boolean = false) {\n    this.mapper.set(key, object ? JSON.stringify(value) : value)\n    localStorage.setItem(key, object ? JSON.stringify(value) : value);\n  }\n\n  private loadPreferences() {\n    for (let index = 0; index < localStorage.length; index++) {\n      const cacheKey = localStorage.key(index) || '';\n      this.mapper.set(cacheKey, localStorage.getItem(cacheKey) || '');\n    }\n  }\n\n  clear() {\n    for (let index = 0; index < localStorage.length; index++) {\n      const cacheKey = localStorage.key(index) || '';\n      localStorage.removeItem(cacheKey);\n    }\n  }\n}\n","/*\n * Public API Surface of ngx-caching\n */\nexport * from './lib/services/cache/cache.service';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":";;;MAGa,YAAY;IAGvB;QACE,IAAI,CAAC,MAAM,GAAG,IAAI,GAAG,EAAkB,CAAC;QACxC,IAAI,CAAC,eAAe,EAAE,CAAA;KACvB;IAED,GAAG,CAAC,GAAW,EAAE,SAAkB,KAAK;QACtC,IAAI,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;YACxB,MAAM,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YAClC,OAAO,MAAM,IAAI,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC;SACjD;QACD,OAAO,SAAS,CAAC;KAClB;IAED,YAAY,CAAC,GAAW,EAAE,KAAU,EAAE,SAAkB,KAAK;QAC3D,IAAI,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,IAAI,EAAE;YACzB,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;YAC7B,OAAO,KAAK,CAAC;SACd;;YAAM,OAAO,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;KAC7B;IAED,GAAG,CAAC,GAAW,EAAE,KAAU,EAAE,SAAkB,KAAK;QAClD,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC,CAAA;QAC5D,YAAY,CAAC,OAAO,CAAC,GAAG,EAAE,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC,CAAC;KACnE;IAEO,eAAe;QACrB,KAAK,IAAI,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,YAAY,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE;YACxD,MAAM,QAAQ,GAAG,YAAY,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;YAC/C,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,EAAE,YAAY,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAC;SACjE;KACF;IAED,KAAK;QACH,KAAK,IAAI,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,YAAY,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE;YACxD,MAAM,QAAQ,GAAG,YAAY,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;YAC/C,YAAY,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;SACnC;KACF;;yGAxCU,YAAY;6GAAZ,YAAY;2FAAZ,YAAY;kBADxB,UAAU;;;ACFX;;;;ACAA;;;;;;"}},"fesm2015":{"code":"import * as i0 from '@angular/core';\nimport { Injectable } from '@angular/core';\n\nclass CacheService {\n    constructor() {\n        this.mapper = new Map();\n        this.loadPreferences();\n    }\n    get(key, object = false) {\n        if (this.mapper.has(key)) {\n            const item = this.mapper.get(key);\n            return object && item ? JSON.parse(item) : item;\n        }\n        return undefined;\n    }\n    getOrDefault(key, value, object = false) {\n        if (this.get(key) == null) {\n            this.set(key, value, object);\n            return value;\n        }\n        else\n            return this.get(key);\n    }\n    set(key, value, object = false) {\n        this.mapper.set(key, object ? JSON.stringify(value) : value);\n        localStorage.setItem(key, object ? JSON.stringify(value) : value);\n    }\n    loadPreferences() {\n        for (let index = 0; index < localStorage.length; index++) {\n            const cacheKey = localStorage.key(index) || '';\n            this.mapper.set(cacheKey, localStorage.getItem(cacheKey) || '');\n        }\n    }\n    clear() {\n        for (let index = 0; index < localStorage.length; index++) {\n            const cacheKey = localStorage.key(index) || '';\n            localStorage.removeItem(cacheKey);\n        }\n    }\n}\nCacheService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.3\", ngImport: i0, type: CacheService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nCacheService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.0.3\", ngImport: i0, type: CacheService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.3\", ngImport: i0, type: CacheService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return []; } });\n\n/*\n * Public API Surface of ngx-caching\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CacheService };\n//# sourceMappingURL=ngx-caching.mjs.map\n","map":{"version":3,"file":"ngx-caching.mjs","sources":["../../../projects/ngx-caching/src/lib/services/cache/cache.service.ts","../../../projects/ngx-caching/src/public-api.ts","../../../projects/ngx-caching/src/ngx-caching.ts"],"sourcesContent":["import {Injectable} from '@angular/core';\n\n@Injectable()\nexport class CacheService {\n  private readonly mapper: Map<string, string>;\n\n  constructor() {\n    this.mapper = new Map<string, string>();\n    this.loadPreferences()\n  }\n\n  get(key: string, object: boolean = false): any {\n    if (this.mapper.has(key)) {\n      const item = this.mapper.get(key);\n      return object && item ? JSON.parse(item) : item;\n    }\n    return undefined;\n  }\n\n  getOrDefault(key: string, value: any, object: boolean = false): any {\n    if (this.get(key) == null) {\n      this.set(key, value, object);\n      return value;\n    } else return this.get(key);\n  }\n\n  set(key: string, value: any, object: boolean = false) {\n    this.mapper.set(key, object ? JSON.stringify(value) : value)\n    localStorage.setItem(key, object ? JSON.stringify(value) : value);\n  }\n\n  private loadPreferences() {\n    for (let index = 0; index < localStorage.length; index++) {\n      const cacheKey = localStorage.key(index) || '';\n      this.mapper.set(cacheKey, localStorage.getItem(cacheKey) || '');\n    }\n  }\n\n  clear() {\n    for (let index = 0; index < localStorage.length; index++) {\n      const cacheKey = localStorage.key(index) || '';\n      localStorage.removeItem(cacheKey);\n    }\n  }\n}\n","/*\n * Public API Surface of ngx-caching\n */\nexport * from './lib/services/cache/cache.service';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":";;;MAGa,YAAY;IAGvB;QACE,IAAI,CAAC,MAAM,GAAG,IAAI,GAAG,EAAkB,CAAC;QACxC,IAAI,CAAC,eAAe,EAAE,CAAA;KACvB;IAED,GAAG,CAAC,GAAW,EAAE,SAAkB,KAAK;QACtC,IAAI,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;YACxB,MAAM,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YAClC,OAAO,MAAM,IAAI,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC;SACjD;QACD,OAAO,SAAS,CAAC;KAClB;IAED,YAAY,CAAC,GAAW,EAAE,KAAU,EAAE,SAAkB,KAAK;QAC3D,IAAI,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,IAAI,EAAE;YACzB,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;YAC7B,OAAO,KAAK,CAAC;SACd;;YAAM,OAAO,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;KAC7B;IAED,GAAG,CAAC,GAAW,EAAE,KAAU,EAAE,SAAkB,KAAK;QAClD,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC,CAAA;QAC5D,YAAY,CAAC,OAAO,CAAC,GAAG,EAAE,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC,CAAC;KACnE;IAEO,eAAe;QACrB,KAAK,IAAI,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,YAAY,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE;YACxD,MAAM,QAAQ,GAAG,YAAY,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;YAC/C,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,EAAE,YAAY,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAC;SACjE;KACF;IAED,KAAK;QACH,KAAK,IAAI,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,YAAY,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE;YACxD,MAAM,QAAQ,GAAG,YAAY,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;YAC/C,YAAY,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;SACnC;KACF;;yGAxCU,YAAY;6GAAZ,YAAY;2FAAZ,YAAY;kBADxB,UAAU;;;ACFX;;;;ACAA;;;;;;"}}}